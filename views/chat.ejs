<% var adminName = typeof adminName !== 'undefined' ? adminName : 'Admin'; %>
<div class="chat-wrapper">
    <div class="chat-sidebar card">
        <div class="chat-search">
            <span class="icon">
                <iconify-icon icon="iconoir:search"></iconify-icon>
            </span>
            <input type="text" name="#0" autocomplete="off" placeholder="Search...">
        </div>
        
        <div class="chat-all-list">
        </div>
    </div>
    <div class="chat-main card">
        <div class="chat-header-container">
            <div class="chat-sidebar-single active" id="chat-header-user">
                <div class="img">
                    <img src="/images/avatar/1.png" alt="image">
                </div>
                <div class="info">
                    <h6 class="text-md mb-0" id="chat-header-username">&nbsp;</h6>
                    <p class="mb-0">Available</p>
                </div>
                <div class="action d-inline-flex align-items-center gap-3">
                    <button type="button" class="text-xl text-primary-light">
                        <iconify-icon icon="mi:call"></iconify-icon>
                    </button>
                    <button type="button" class="text-xl text-primary-light">
                        <iconify-icon icon="fluent:video-32-regular"></iconify-icon>
                    </button>
                    <div class="btn-group">
                        <button type="button" class="text-primary-light text-xl" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false">
                            <iconify-icon icon="tabler:dots-vertical"></iconify-icon>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-lg-end border">
                            <li>
                                <button class="dropdown-item rounded text-secondary-light bg-hover-neutral-200 text-hover-neutral-900 d-flex align-items-center gap-2" type="button">
                                    <iconify-icon icon="mdi:clear-circle-outline"></iconify-icon>
                                    Clear All
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item rounded text-secondary-light bg-hover-neutral-200 text-hover-neutral-900 d-flex align-items-center gap-2" type="button">
                                    <iconify-icon icon="ic:baseline-block"></iconify-icon>
                                    Block
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div><!-- chat-sidebar-single end -->
        </div>
        <div class="chat-message-list">
        </div>
        <div class="chat-input-container">
            <form class="chat-message-box">
                <input type="text" name="chatMessage" placeholder="Write message" autocomplete="off">
                <div class="chat-message-box-action">
                    <button type="button" class="text-xl">
                        <iconify-icon icon="ph:link"></iconify-icon>
                    </button>
                    <button type="button" class="text-xl">
                        <iconify-icon icon="solar:gallery-linear"></iconify-icon>
                    </button>
                    <button type="submit" class="btn btn-sm btn-primary-600 radius-8 d-inline-flex align-items-center gap-1">
                        Send
                        <iconify-icon icon="f7:paperplane"></iconify-icon>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Real-time Chat Admin Panel -->
<script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
<script>
// --- Real-time Chat Admin Panel ---
window.socket = window.socket || io('<%= apiUrl %>');

// State
let messages = [];
let users = [];
let selectedUser = null;

// DOM
const sidebarList = document.querySelector('.chat-all-list');
const chatWindow = document.querySelector('.chat-message-list');
const messageForm = document.querySelector('.chat-message-box');
const messageInput = messageForm.querySelector('input[name="chatMessage"]');

// Helper: Group messages by user (assuming msg has .user or .from)
function groupMessagesByUser(msgs) {
  const map = {};
  msgs.forEach(msg => {
    const user = msg.user || msg.from || 'Unknown';
    if (!map[user]) map[user] = [];
    map[user].push(msg);
  });
  return map;
}

// Helper: Render sidebar
function renderSidebar() {
  const grouped = groupMessagesByUser(messages);
  users = Object.keys(grouped).filter(u => u.trim().toLowerCase() !== ADMIN_NAME.trim().toLowerCase());
  sidebarList.innerHTML = '';
  if (users.length === 0) {
    sidebarList.innerHTML = `<div class="no-messages-placeholder" style="text-align:center;padding:2rem;color:#7a869a;">No messages yet</div>`;
    return;
  }
  users.forEach(user => {
    const lastMsg = grouped[user][grouped[user].length - 1];
    const active = user === selectedUser ? 'active' : '';
    sidebarList.innerHTML += `
      <div class="chat-sidebar-single ${active}" data-user="${user}">
        <div class="img">
          <img src="/images/avatar/1.png" alt="image">
        </div>
        <div class="info">
          <h6 class="text-md mb-0">${user}</h6>
          <p class="mb-0">${lastMsg.message || ''}</p>
        </div>
        <div class="action">
          <div class="btn-group">
            <button type="button" class="text-secondary-light text-xl" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false">
              <iconify-icon icon="bi:three-dots"></iconify-icon>
            </button>
            <ul class="dropdown-menu dropdown-menu-lg-end border">
              <li>
                <a href="/chat-profile?user=${encodeURIComponent(user)}" class="dropdown-item rounded text-secondary-light bg-hover-neutral-200 text-hover-neutral-900 d-flex align-items-center gap-2">
                  <iconify-icon icon="fluent:person-32-regular"></iconify-icon>
                  Profile
                </a>
              </li>
              <li>
                <a href="/chat-profile?user=${encodeURIComponent(user)}&tab=settings" class="dropdown-item rounded text-secondary-light bg-hover-neutral-200 text-hover-neutral-900 d-flex align-items-center gap-2">
                  <iconify-icon icon="carbon:settings"></iconify-icon>
                  Settings
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    `;
  });

  // Add click listeners for the main user div (not the 3-dot button)
  document.querySelectorAll('.chat-sidebar-single').forEach(el => {
    if (!el.classList.contains('top-profile')) {
      el.onclick = (e) => {
        // Only trigger if not clicking the 3-dot button
        if (!e.target.closest('.action')) {
          selectedUser = el.getAttribute('data-user');
          renderSidebar();
          renderChatWindow();
          updateChatHeader();
          updateProfileLinks();
        }
      };
    }
  });

  // Initialize Bootstrap dropdowns for all .chat-all-list .dropdown-toggle
  if (window.bootstrap && window.bootstrap.Dropdown) {
    document.querySelectorAll('.chat-all-list .text-xl[data-bs-toggle="dropdown"]').forEach(btn => {
      // Remove any previous dropup
      btn.closest('.btn-group').classList.remove('dropup');
      // Detect if near bottom
      const rect = btn.getBoundingClientRect();
      const sidebarRect = sidebarList.getBoundingClientRect();
      // If the button is in the bottom 120px of the sidebar, make it a dropup
      if (rect.bottom + 120 > sidebarRect.bottom) {
        btn.closest('.btn-group').classList.add('dropup');
      }
      new window.bootstrap.Dropdown(btn);
    });
  }
}

// Helper: Render chat window
function renderChatWindow() {
  chatWindow.innerHTML = '';
  const chatHeader = document.querySelector('.chat-header-container');
  const chatInput = document.querySelector('.chat-input-container');
  if (!selectedUser) {
    if (chatHeader) chatHeader.style.display = 'none';
    if (chatInput) chatInput.style.display = 'none';
    chatWindow.innerHTML = `<div class="no-chat-selected" style="display:flex;align-items:center;justify-content:center;height:100%;color:#b0b8c1;font-size:1.5rem;text-align:center;">Select a chat in right side panel</div>`;
    updateChatHeader();
    updateProfileLinks();
    return;
  } else {
    if (chatHeader) chatHeader.style.display = '';
    if (chatInput) chatInput.style.display = '';
  }
  // Filter all messages for this conversation
  const conversation = messages.filter(msg =>
    (msg.user === selectedUser && !msg.isAdmin) || // user messages
    (msg.to === selectedUser && msg.isAdmin)       // admin replies to this user
  );
  if (conversation.length === 0) {
    chatWindow.innerHTML = `<div class="no-messages-placeholder" style="display:flex;align-items:center;justify-content:center;height:100%;color:#b0b8c1;font-size:1.2rem;text-align:center;">No messages yet</div>`;
    updateChatHeader();
    updateProfileLinks();
    return;
  }
  conversation.forEach(msg => {
    const isAdmin = msg.isAdmin;
    chatWindow.innerHTML += `
      <div class="chat-single-message ${isAdmin ? 'right' : 'left'}">
        ${!isAdmin ? '<img src="/images/avatar/1.png" alt="image" class="avatar-lg object-fit-cover rounded-circle">' : ''}
        <div class="chat-message-content">
          <p class="mb-3">${msg.message}</p>
          <p class="chat-time mb-0"><span>${msg.time || ''}</span></p>
        </div>
      </div>
    `;
  });
  chatWindow.scrollTop = chatWindow.scrollHeight;
  updateChatHeader();
  updateProfileLinks();
}

// Helper to get query param
function getQueryParam(name) {
  const url = new URL(window.location.href);
  return url.searchParams.get(name);
}

// Listen for all messages on join
window.socket.emit('admin-join');
window.socket.on('support-messages', (msgs) => {
  messages = msgs;
  // Default: select first user, but prioritize ?user= param
  const grouped = groupMessagesByUser(messages);
  const userParam = getQueryParam('user');
  if (userParam && grouped[userParam]) {
    selectedUser = userParam;
  } else {
    selectedUser = Object.keys(grouped)[0] || null;
  }
  renderSidebar();
  renderChatWindow();
});

// Listen for new messages
window.socket.on('new-support-message', (msg) => {
  messages.push(msg);
  // Only auto-select if the message is from a new user (not admin)
  const msgUser = msg.user || msg.from;
  if (!users.includes(msgUser) && msgUser !== ADMIN_NAME) {
    selectedUser = msgUser;
  }
  renderSidebar();
  renderChatWindow();
});

// Send message (reply)
messageForm.onsubmit = function(e) {
  e.preventDefault();
  if (!selectedUser || !messageInput.value.trim()) return;
  const msg = {
    user: ADMIN_NAME,
    to: selectedUser,
    message: messageInput.value,
    time: new Date().toLocaleTimeString(),
    isAdmin: true
  };
  window.socket.emit('support-message', msg);
  // Do NOT push to messages here; wait for new-support-message event
  messageInput.value = '';
};

const ADMIN_NAME = '<%= adminName %>';

function updateChatHeader() {
  const headerName = document.getElementById('chat-header-username');
  if (headerName) headerName.textContent = selectedUser || '';
}

window.updateProfileLinks = function() {
  var user = selectedUser || '';
  var profileLink = document.getElementById('chat-profile-link');
  var settingsLink = document.getElementById('chat-settings-link');
  if (profileLink) profileLink.setAttribute('href', '/chat-profile?user=' + encodeURIComponent(user));
  if (settingsLink) settingsLink.setAttribute('href', '/chat-profile?user=' + encodeURIComponent(user) + '&tab=settings');
}

// Add this function for the user menu
window.showUserMenu = function(event, user) {
  event.stopPropagation(); // Prevent triggering the parent div's click
  // Remove any existing menus
  const existingMenu = document.querySelector('.user-dropdown-menu');
  if (existingMenu) existingMenu.remove();
  // Create and show the menu
  const menu = document.createElement('div');
  menu.className = 'user-dropdown-menu';
  menu.innerHTML = `
    <ul class="dropdown-menu dropdown-menu-lg-end border" style="display: block; position: absolute; margin: 0;">
      <li>
        <a href="/chat-profile?user=${encodeURIComponent(user)}" class="dropdown-item rounded text-secondary-light bg-hover-neutral-200 text-hover-neutral-900 d-flex align-items-center gap-2">
          <iconify-icon icon="fluent:person-32-regular"></iconify-icon>
          Profile
        </a>
      </li>
    </ul>
  `;
  // Position the menu next to the button
  const button = event.currentTarget;
  const rect = button.getBoundingClientRect();
  menu.style.position = 'fixed';
  menu.style.top = `${rect.bottom + 4}px`;
  menu.style.left = `${rect.left - 40}px`;
  menu.style.zIndex = '9999';
  // Add to document
  document.body.appendChild(menu);
  // Close menu when clicking outside
  document.addEventListener('click', function closeMenu(e) {
    if (!e.target.closest('.user-dropdown-menu') && !e.target.closest('.action')) {
      menu.remove();
      document.removeEventListener('click', closeMenu);
    }
  });
}

// Add the necessary CSS
const style = document.createElement('style');
style.textContent = `
  .user-dropdown-menu {
    position: absolute;
    z-index: 9999;
    min-width: 180px;
    background: #232b3e;
    border: 1px solid #2e3951;
    border-radius: 16px;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    padding: 0;
    margin-top: 8px;
    overflow: hidden;
  }
  .user-dropdown-menu .dropdown-menu {
    background: transparent;
    border: none;
    box-shadow: none;
    padding: 0;
    margin: 0;
    min-width: 100%;
  }
  .user-dropdown-menu .dropdown-item {
    background: transparent;
    color: #fff;
    padding: 12px 20px;
    font-size: 1rem;
    border-radius: 0;
    display: flex;
    align-items: center;
    gap: 10px;
    transition: background 0.2s, color 0.2s;
  }
  .user-dropdown-menu .dropdown-item:hover, .user-dropdown-menu .dropdown-item:focus {
    background: #2e3951;
    color: #fff;
  }
  .user-dropdown-menu .dropdown-item:active {
    background: #1a2031;
    color: #fff;
  }
`;
document.head.appendChild(style);

// For notification dropdown, use this filtered array:
const userMessages = messages.filter(msg => !msg.isAdmin && msg.user !== ADMIN_NAME);
// Use userMessages for notification display
// Example:
// userMessages.forEach(msg => { /* render notification item */ });
</script>


